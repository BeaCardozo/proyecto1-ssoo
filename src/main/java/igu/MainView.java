package igu;

import java.awt.Component;
import javax.swing.JOptionPane;
import com.mycompany.proyecto1ssoo.Simulator;
import com.mycompany.proyecto1ssoo.Process;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel; 
import java.awt.event.ActionListener; 
import java.awt.event.ActionEvent; 

/**
 *
 * @author beacardozo
 */
public class MainView extends javax.swing.JFrame {
    private Simulator simulator;

    /**
     * Creates new form PantallaPrincipal
     */
    public MainView() {
        initComponents();
        simulator = new Simulator(2); // Esto es correcto
        updateButtonStates(); // Este método debe ser llamado después de inicializar el simulador
        setTitle("Process Simulator");
        disableJPanel(IOBoundOption.isSelected());
    }
     
    public void disableJPanel (boolean value) {
        for(Component a: IOBoundPanel.getComponents()) {
            a.setEnabled(value);
        }
    }
    
    private void resetSpinners() {
        CyclesGenerateExcepSpinner.setValue(1);
        CyclesSatisfyExcepSpinner.setValue(1);
    }
    
    private void resetFields() {
        ProcessNameTextField.setText("");
        IOBoundOption.setSelected(true);
        CPUBoundOption.setSelected(false);
        resetSpinners();
    }
    
    private void updateButtonStates() {
        boolean isQueueEmpty = simulator.getReadyQueue().isEmpty();
        System.out.println("Is queue empty: " + isQueueEmpty); // Para depurar
        ClearProcessTableButton.setEnabled(!isQueueEmpty);
        DeleteProcessButton.setEnabled(!isQueueEmpty);
        StartSimulationButton.setEnabled(!isQueueEmpty);
    }
    
    private Process getSelectedProcess() {
        int selectedRow = ProcessTable.getSelectedRow(); 
        if (selectedRow >= 0) {
        return simulator.getReadyQueue().get(selectedRow);
        }
        return null; 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProcessTypeGroup = new javax.swing.ButtonGroup();
        ActiveProcessorsGroup = new javax.swing.ButtonGroup();
        ConfigPanel = new javax.swing.JPanel();
        ProcessDetailsPanel = new javax.swing.JPanel();
        ProcessTypeLabel = new javax.swing.JLabel();
        IOBoundOption = new javax.swing.JRadioButton();
        CPUBoundOption = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProcessTable = new javax.swing.JTable();
        ClearProcessTableButton = new javax.swing.JButton();
        AddProcessButton = new javax.swing.JButton();
        DeleteProcessButton = new javax.swing.JButton();
        ProcessNameLabel = new javax.swing.JLabel();
        ProcessNameTextField = new javax.swing.JTextField();
        IOBoundPanel = new javax.swing.JPanel();
        CyclesSatisfyExcepLabel = new javax.swing.JLabel();
        CyclesGenerateExcepLabel = new javax.swing.JLabel();
        CyclesSatisfyExcepSpinner = new javax.swing.JSpinner();
        CyclesGenerateExcepSpinner = new javax.swing.JSpinner();
        SystemSpecificationsPanel = new javax.swing.JPanel();
        PlanningPolicyLabel = new javax.swing.JLabel();
        CicleDurationLabel = new javax.swing.JLabel();
        ActiveProcessorsTextField = new javax.swing.JLabel();
        CicleDurationTextField1 = new javax.swing.JTextField();
        PlanninPolicyComboBox = new javax.swing.JComboBox<>();
        TwoProcessorsOption = new javax.swing.JRadioButton();
        ThreeProcessorsOption = new javax.swing.JRadioButton();
        TimeUnitComboBox = new javax.swing.JComboBox<>();
        StartSimulationButton = new javax.swing.JButton();
        SimulationPanel = new javax.swing.JPanel();
        SystemPerfomanceMetricsPanel = new javax.swing.JPanel();
        GraphicsPanel = new javax.swing.JPanel();
        SimulationDetailsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 1000));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ConfigPanel.setBackground(new java.awt.Color(255, 255, 255));
        ConfigPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ProcessDetailsPanel.setBackground(new java.awt.Color(255, 255, 255));
        ProcessDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Process Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Geeza Pro", 3, 14))); // NOI18N
        ProcessDetailsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ProcessTypeLabel.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        ProcessTypeLabel.setText("Process Type:");
        ProcessDetailsPanel.add(ProcessTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 230, -1));

        ProcessTypeGroup.add(IOBoundOption);
        IOBoundOption.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        IOBoundOption.setSelected(true);
        IOBoundOption.setText("I/O Bound");
        IOBoundOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IOBoundOptionActionPerformed(evt);
            }
        });
        ProcessDetailsPanel.add(IOBoundOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        ProcessTypeGroup.add(CPUBoundOption);
        CPUBoundOption.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        CPUBoundOption.setText("CPU Bound");
        CPUBoundOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPUBoundOptionActionPerformed(evt);
            }
        });
        ProcessDetailsPanel.add(CPUBoundOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        ProcessTable.setAutoCreateRowSorter(true);
        ProcessTable.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        ProcessTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process Name", "Process Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProcessTable.setSelectionBackground(new java.awt.Color(169, 217, 241));
        ProcessTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ProcessTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(ProcessTable);

        ProcessDetailsPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 260, 150));

        ClearProcessTableButton.setBackground(new java.awt.Color(169, 217, 241));
        ClearProcessTableButton.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        ClearProcessTableButton.setText("Clear");
        ClearProcessTableButton.setBorderPainted(false);
        ClearProcessTableButton.setOpaque(true);
        ClearProcessTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearProcessTableButtonActionPerformed(evt);
            }
        });
        ProcessDetailsPanel.add(ClearProcessTableButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 500, 110, 30));

        AddProcessButton.setBackground(new java.awt.Color(169, 217, 241));
        AddProcessButton.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        AddProcessButton.setText("Add Process");
        AddProcessButton.setBorderPainted(false);
        AddProcessButton.setOpaque(true);
        AddProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProcessButtonActionPerformed(evt);
            }
        });
        ProcessDetailsPanel.add(AddProcessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 200, 30));

        DeleteProcessButton.setBackground(new java.awt.Color(169, 217, 241));
        DeleteProcessButton.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        DeleteProcessButton.setText("Delete");
        DeleteProcessButton.setBorderPainted(false);
        DeleteProcessButton.setOpaque(true);
        DeleteProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteProcessButtonActionPerformed(evt);
            }
        });
        ProcessDetailsPanel.add(DeleteProcessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 110, 30));

        ProcessNameLabel.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        ProcessNameLabel.setText("Process Name:");
        ProcessDetailsPanel.add(ProcessNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 230, -1));

        ProcessNameTextField.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        ProcessNameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProcessNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ProcessNameTextFieldKeyTyped(evt);
            }
        });
        ProcessDetailsPanel.add(ProcessNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 250, -1));

        IOBoundPanel.setBackground(new java.awt.Color(255, 255, 255));
        IOBoundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CyclesSatisfyExcepLabel.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CyclesSatisfyExcepLabel.setText("Cycles to satisfy an exception:");
        IOBoundPanel.add(CyclesSatisfyExcepLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        CyclesGenerateExcepLabel.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CyclesGenerateExcepLabel.setText("Cycles to generate an exception:");
        IOBoundPanel.add(CyclesGenerateExcepLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        CyclesSatisfyExcepSpinner.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CyclesSatisfyExcepSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        IOBoundPanel.add(CyclesSatisfyExcepSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, -1, -1));

        CyclesGenerateExcepSpinner.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CyclesGenerateExcepSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        IOBoundPanel.add(CyclesGenerateExcepSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));

        ProcessDetailsPanel.add(IOBoundPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 260, 120));

        ConfigPanel.add(ProcessDetailsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 280, 550));

        SystemSpecificationsPanel.setBackground(new java.awt.Color(255, 255, 255));
        SystemSpecificationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "System Specifications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Geeza Pro", 3, 14))); // NOI18N
        SystemSpecificationsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PlanningPolicyLabel.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        PlanningPolicyLabel.setText("Planning Policy:");
        SystemSpecificationsPanel.add(PlanningPolicyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 210, -1));

        CicleDurationLabel.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        CicleDurationLabel.setText("Cycle Duration:");
        SystemSpecificationsPanel.add(CicleDurationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 230, -1));

        ActiveProcessorsTextField.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        ActiveProcessorsTextField.setText("Number of Active Processors:");
        SystemSpecificationsPanel.add(ActiveProcessorsTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 200, -1));

        CicleDurationTextField1.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CicleDurationTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        CicleDurationTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CicleDurationTextField1KeyTyped(evt);
            }
        });
        SystemSpecificationsPanel.add(CicleDurationTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 160, -1));

        PlanninPolicyComboBox.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        PlanninPolicyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS - First-Come, First-Served", "Round Robin", "SJF - Shortest Job First", " " }));
        PlanninPolicyComboBox.setBorder(null);
        SystemSpecificationsPanel.add(PlanninPolicyComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 260, -1));

        ActiveProcessorsGroup.add(TwoProcessorsOption);
        TwoProcessorsOption.setSelected(true);
        TwoProcessorsOption.setText("2");
        SystemSpecificationsPanel.add(TwoProcessorsOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, -1, -1));

        ActiveProcessorsGroup.add(ThreeProcessorsOption);
        ThreeProcessorsOption.setText("3");
        SystemSpecificationsPanel.add(ThreeProcessorsOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, -1, -1));

        TimeUnitComboBox.setFont(new java.awt.Font("Geneva", 1, 13)); // NOI18N
        TimeUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "s", "ms" }));
        SystemSpecificationsPanel.add(TimeUnitComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, -1, -1));

        ConfigPanel.add(SystemSpecificationsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, 280, 240));

        StartSimulationButton.setBackground(new java.awt.Color(181, 241, 169));
        StartSimulationButton.setFont(new java.awt.Font("Geneva", 1, 14)); // NOI18N
        StartSimulationButton.setText("Start Simulation");
        StartSimulationButton.setBorderPainted(false);
        StartSimulationButton.setOpaque(true);
        StartSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartSimulationButtonActionPerformed(evt);
            }
        });
        ConfigPanel.add(StartSimulationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 830, 250, 50));

        getContentPane().add(ConfigPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 900));

        SimulationPanel.setBackground(new java.awt.Color(255, 255, 255));
        SimulationPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SystemPerfomanceMetricsPanel.setBackground(new java.awt.Color(255, 255, 255));
        SystemPerfomanceMetricsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "System Perfomance Metrics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Geeza Pro", 3, 14))); // NOI18N
        SystemPerfomanceMetricsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        SimulationPanel.add(SystemPerfomanceMetricsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 490, 300));

        GraphicsPanel.setBackground(new java.awt.Color(255, 255, 255));
        GraphicsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Graphics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Geeza Pro", 3, 14))); // NOI18N
        GraphicsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        SimulationPanel.add(GraphicsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 590, 540, 300));

        SimulationDetailsPanel.setBackground(new java.awt.Color(255, 255, 255));
        SimulationDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Geeza Pro", 3, 14))); // NOI18N
        SimulationPanel.add(SimulationDetailsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 1040, 560));

        getContentPane().add(SimulationPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 1070, 900));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClearProcessTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearProcessTableButtonActionPerformed
        int response = JOptionPane.showConfirmDialog(
            null,
            "Are you sure you want to clear the processes?",
            "Yes",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            simulator.getReadyQueue().clear(); 
            updateInterface(); 
            updateButtonStates();
            JOptionPane.showMessageDialog(null, "Process queue cleared successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            System.out.println("Process clearing canceled."); 
        }
    }//GEN-LAST:event_ClearProcessTableButtonActionPerformed

    private void StartSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartSimulationButtonActionPerformed
        int cycleDuration = Integer.parseInt(CicleDurationTextField1.getText());
        int numProcessors = TwoProcessorsOption.isSelected() ? 2 : 3;
        simulator = new Simulator(numProcessors);
        Timer timer = new Timer(cycleDuration * 1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                simulator.executeCycle();
                updateInterface();
            }
        });
        timer.start();
        StartSimulationButton.setEnabled(false);
    }//GEN-LAST:event_StartSimulationButtonActionPerformed

    private void IOBoundOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IOBoundOptionActionPerformed
        disableJPanel(true);
    }//GEN-LAST:event_IOBoundOptionActionPerformed

    private void AddProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProcessButtonActionPerformed
       // Validar campos
        String message = "Attention: Please fill in all required fields."; 
        if (ProcessNameTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.WARNING_MESSAGE);
            return; 
        }

        String name = ProcessNameTextField.getText();
        // Validar que no exista el nombre del proceso en la cola
        if (simulator.getReadyQueue().containsName(name)) { 
            JOptionPane.showMessageDialog(null, "A process with that name already exists.", "Error", JOptionPane.WARNING_MESSAGE);
            return; 
        }

        boolean isCpuBound = CPUBoundOption.isSelected();
        int exceptionCycle = (int) CyclesGenerateExcepSpinner.getValue();
        int satisfactionCycle = (int) CyclesSatisfyExcepSpinner.getValue();

        System.out.println("Creating process:");
        System.out.println("Name: " + name);
        System.out.println("Type: " + (isCpuBound ? "CPU Bound" : "I/O Bound"));
        System.out.println("Cycles to generate an exception: " + exceptionCycle);
        System.out.println("Cycles to satisfy an exception: " + satisfactionCycle);

        // Crear el proceso
        Process process = new Process(simulator.getGlobalCycle(), name, 10, isCpuBound, exceptionCycle, satisfactionCycle);
    
        // Agregar el proceso al simulador
        simulator.addProcess(process);

        DefaultTableModel modelo = (DefaultTableModel) ProcessTable.getModel();
        modelo.addRow(new Object[]{process.getName(), isCpuBound ? "CPU Bound" : "I/O Bound"});
        JOptionPane.showMessageDialog(null, "Process Created!", "Success", JOptionPane.INFORMATION_MESSAGE);
        resetFields();
        updateButtonStates();
    }//GEN-LAST:event_AddProcessButtonActionPerformed

    public void updateInterface() {
        // Actualizar la tabla de procesos listos
        DefaultTableModel modeloListos = (DefaultTableModel) ProcessTable.getModel();
        modeloListos.setRowCount(0);
        for (int i = 0; i < simulator.getReadyQueue().size(); i++) {
            Process process = simulator.getReadyQueue().get(i);
            modeloListos.addRow(new Object[]{process.getName(), process.isCpuBound() ? "CPU Bound" : "I/O Bound"});
        }
    }
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(() -> {
            new MainView().setVisible(true);
        });
    }
    private void DeleteProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteProcessButtonActionPerformed
       Process selectedProcess = getSelectedProcess(); 
        if (selectedProcess != null) {
            if (simulator.getReadyQueue().remove(selectedProcess)) { 
                updateInterface();
                JOptionPane.showMessageDialog(null, "Process deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                updateButtonStates();
            } else {
                JOptionPane.showMessageDialog(null, "Process not found in the queue.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No process selected to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteProcessButtonActionPerformed

    private void CPUBoundOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPUBoundOptionActionPerformed
        disableJPanel(false);
        resetSpinners();
    }//GEN-LAST:event_CPUBoundOptionActionPerformed

    private void ProcessNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProcessNameTextFieldKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) && c != ' ') {
            evt.consume(); 
        }
    }//GEN-LAST:event_ProcessNameTextFieldKeyTyped

    private void CicleDurationTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CicleDurationTextField1KeyTyped
        char c = evt.getKeyChar();
        if(c < '0' || c > '9') evt.consume();
    }//GEN-LAST:event_CicleDurationTextField1KeyTyped
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ActiveProcessorsGroup;
    private javax.swing.JLabel ActiveProcessorsTextField;
    private javax.swing.JButton AddProcessButton;
    private javax.swing.JRadioButton CPUBoundOption;
    private javax.swing.JLabel CicleDurationLabel;
    private javax.swing.JTextField CicleDurationTextField1;
    private javax.swing.JButton ClearProcessTableButton;
    private javax.swing.JPanel ConfigPanel;
    private javax.swing.JLabel CyclesGenerateExcepLabel;
    private javax.swing.JSpinner CyclesGenerateExcepSpinner;
    private javax.swing.JLabel CyclesSatisfyExcepLabel;
    private javax.swing.JSpinner CyclesSatisfyExcepSpinner;
    private javax.swing.JButton DeleteProcessButton;
    private javax.swing.JPanel GraphicsPanel;
    private javax.swing.JRadioButton IOBoundOption;
    private javax.swing.JPanel IOBoundPanel;
    private javax.swing.JComboBox<String> PlanninPolicyComboBox;
    private javax.swing.JLabel PlanningPolicyLabel;
    private javax.swing.JPanel ProcessDetailsPanel;
    private javax.swing.JLabel ProcessNameLabel;
    private javax.swing.JTextField ProcessNameTextField;
    private javax.swing.JTable ProcessTable;
    private javax.swing.ButtonGroup ProcessTypeGroup;
    private javax.swing.JLabel ProcessTypeLabel;
    private javax.swing.JPanel SimulationDetailsPanel;
    private javax.swing.JPanel SimulationPanel;
    private javax.swing.JButton StartSimulationButton;
    private javax.swing.JPanel SystemPerfomanceMetricsPanel;
    private javax.swing.JPanel SystemSpecificationsPanel;
    private javax.swing.JRadioButton ThreeProcessorsOption;
    private javax.swing.JComboBox<String> TimeUnitComboBox;
    private javax.swing.JRadioButton TwoProcessorsOption;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
